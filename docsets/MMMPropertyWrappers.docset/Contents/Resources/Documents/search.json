{"Structs/Lazy.html#/init(wrappedValue:)":{"name":"init(wrappedValue:)","parent_name":"Lazy"},"Structs/Lazy.html#/wrappedValue":{"name":"wrappedValue","parent_name":"Lazy"},"Structs/Lazy.html#/reset()":{"name":"reset()","abstract":"<p>Resets the lazy value, so the closure to generate will be called again upon access.</p>","parent_name":"Lazy"},"Structs/Lazy.html#/update(_:)":{"name":"update(_:)","abstract":"<p>Update the autoclosure for generating the lazy value. This will also reset the value.</p>","parent_name":"Lazy"},"Structs/LazyConstant.html#/init(wrappedValue:)":{"name":"init(wrappedValue:)","parent_name":"LazyConstant"},"Structs/LazyConstant.html#/wrappedValue":{"name":"wrappedValue","parent_name":"LazyConstant"},"Structs/LazyConstant.html#/reset()":{"name":"reset()","abstract":"<p>Resets the lazy value, so the closure to generate will be called again upon access.</p>","parent_name":"LazyConstant"},"Structs/LazyConstant.html#/update(_:)":{"name":"update(_:)","abstract":"<p>Update the autoclosure for generating the lazy value. This will also reset the value.</p>","parent_name":"LazyConstant"},"Structs/LenientEventTrigger.html#/init(wrappedValue:)":{"name":"init(wrappedValue:)","parent_name":"LenientEventTrigger"},"Structs/LenientEventTrigger.html#/subscript(_enclosingInstance:wrapped:storage:)":{"name":"subscript(_enclosingInstance:wrapped:storage:)","parent_name":"LenientEventTrigger"},"Structs/EventTrigger.html#/init(wrappedValue:)":{"name":"init(wrappedValue:)","parent_name":"EventTrigger"},"Structs/EventTrigger.html#/subscript(_enclosingInstance:wrapped:storage:)":{"name":"subscript(_enclosingInstance:wrapped:storage:)","parent_name":"EventTrigger"},"Structs/Once.html#/wrappedValue":{"name":"wrappedValue","parent_name":"Once"},"Structs/Once.html#/init(wrappedValue:)":{"name":"init(wrappedValue:)","parent_name":"Once"},"Structs/Once.html#/freeze()":{"name":"freeze()","parent_name":"Once"},"Structs/Once.html":{"name":"Once","abstract":"<p>A wrapper that allows to set a value only once after setting the initial value. This comes in useful in instances where you"},"Structs/EventTrigger.html":{"name":"EventTrigger","abstract":"<p>A wrapper that will trigger a <code>SimpleEvent</code> or <code>LazySimpleEvent</code>, e.g. <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/AnySimpleEvent.html\">AnySimpleEvent</a></code> when the value"},"Structs/LenientEventTrigger.html":{"name":"LenientEventTrigger","abstract":"<p>Same as <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/EventTrigger.html\">@EventTrigger</a></code>, but without requiring to conform to <code>Equatable</code>, this will trigger every time the value hits <code>didSet</code>.</p>"},"Structs/LazyConstant.html":{"name":"LazyConstant","abstract":"<p>Same as <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Lazy.html\">@Lazy</a></code>, only without the ability to change the value.</p>"},"Structs/Lazy.html":{"name":"Lazy","abstract":"<p>A wrapper that only generates the value opon accessing it, it&rsquo;s similar to <code>lazy var</code> except you have the ability to"},"Protocols/AnySimpleEvent.html#/trigger(if:)":{"name":"trigger(if:)","parent_name":"AnySimpleEvent"},"Protocols/EventTriggerable.html#/didChange":{"name":"didChange","parent_name":"EventTriggerable"},"Protocols/EventTriggerable.html":{"name":"EventTriggerable"},"Protocols/AnySimpleEvent.html":{"name":"AnySimpleEvent"},"Extensions.html#/SimpleEvent":{"name":"SimpleEvent"},"Extensions.html#/LazySimpleEvent":{"name":"LazySimpleEvent"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}